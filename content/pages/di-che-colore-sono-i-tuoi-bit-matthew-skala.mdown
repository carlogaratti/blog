# Di che colore sono i tuoi bit? #

_Questo post è una traduzione di ["What Colour are your bits?"][] di Matthew Skala._

[Paranoia][] è un classico gioco d'avventura che ha luogo in un mondo futuro
estremamente <s>repressivo</s> Utopistico amministrato dal Computer, il quale
è Tuo Amico. TODO

Nel mondo di Paranoia tutto ha un livello di sicurezza codificato da un colore
(da infrarosso fino a ultravioletto) e tutti hanno un livello di autorizzazione
codificato allo stesso modo. Non è permesso toccare o avere qualsivoglia
rapporto con qualcosa di livello superiore al proprio. Un Troubleshooter di
livello Rosso non può attraversare una porta di livello Arancione. Formalmente,
non gli è neanche permesso di essere a conoscenza di cose di livello superiore
al proprio. Chiunque violi questa regola è un Mutante Traditore Comunista,
passibile di pena di morte.

Gran parte del gioco ruota intorno alle conseguenze di questi livelli di
sicurezza. Ad esempio, l'Amico Computer potrebbe chiedere a un gruppo di
Troubleshooter di livello Rosso di ridipingere un corridoio che avrebbe dovuto
essere Arancione ma è stato dipinto di Giallo <s>per errore</s> dai Mutanti
Traditori Comunisti. È assai probabile che in tale caso i Troubleshooter
finiscano per spararsi a vicenda per aver tradito l'Amico Computer, dato che
nessuno di essi può toccare la vernice, avvicinarsi al corridoio, parlare del
proprio compito e a tutti è richiesto di far rispettare tali regole. 

Nella proprietà intellettuale e in altri campi siamo molto interessati a
informazioni, dati, opere d'arte e un sacco di altre cose che riassumerò con il
termine "bit". I bit sono tutte quelle cose che (in linea di principio) possono
essere rappresentate da zeri e uni. Gran parte della proprietà intellettuale
consiste in regole su proprietà intangibili dei bit — Chi ha creato i bit? Da
dove vengono? Dove stanno andando? Sono copie di altri bit? A queste domande si
può dare risposta con dei "metadati", ma TODO

I bit, per loro natura, non hanno Colore. Il Colore, in questo senso, non fa
parte dell'universo. TODO

Il mio amico aveva messo in atto un procedimento elaborato che in sostanza
consisteva nel riprodurre da un sintetizzatore software con il volume impostato
a zero un qualche altro brano musicale della lunghezza di quattro minuti e
trentatre secondi. Il risultato era un file della giusta lunghezza di soli zero
— che ha quindi compresso con un compressore MP3. Il file MP3 era identico bit
a bit a uno ottenuto comprimendo `/dev/zero`… ma questo file era (secondo lui)
una vera e propria registrazione di 4'33", mentre l'altro non lo sarebbe stato.
La differenza stava nel Colore dei bit. Lui sosteneva che i bit nella propria
copia di 433.mp3 avessero un Colore diverso da quelli nella copia di 433.mp3 che
potrei ottenere tramite `/dev/zero`, sebbene i due file contengano esattamente
gli stessi bit.

Ora, il paragrafo precedente è sostanzialmente privo di senso per un informatico
o per chi possegga un background matematico (come il mio amico; la sua era una
sorta di complicata presa in giro). I numeri sono numeri, no? Se io sommo 39 e 3
ottenendo 42, e tu fai lo stesso, non ha alcun senso affermare che il "mio" 42
sia diverso dal "tuo" 42. Dati due file MP3 identici bit a bit, non esiste un
modo sensato (per un informatico) di dire che uno è una registrazione dell'opera
di Cage e l'altro no. Non esisterebbe modo di sondare uno dei file e capire
quale fosse in origine, perché in realtà sono lo stesso file. Avere gli stessi
bit significa per definizione essere identici. I Bit non hanno Colore; gli
informatici, così come i computer, sono Daltonici. Questo non è un nostro errore
o una nostra mancanza: anzi, ci siamo impegnati per diventarlo. Il Daltonismo
degli informatici ci aiuta a capire che anche i computer sono Daltonici, e
dobbiamo esserne ben coscienti di ciò per svolgere il nostro lavoro.

Il problema è che gli esseri umani in generale non sono Daltonici. La legge non
è Daltonica. È importante non solo quali bit tu possegga, ma anche da dove
provengano. Sul sito internet dell'Osservatorio della Marina degli Stati Uniti
troviamo un esempio di bit Colorati. Su quel sito danno informazioni sull'ora
dell'alba, del tramonto e cose del genere… ma le danno sotto condizione che non
sia lecito usare queste informazioni in tribunale. Se devi sapere quando il
sole è sorto o tramontato TODO

The trouble is, human beings are not in general Colour-blind.  The law is not Colour-blind.  It makes a difference not only what bits you have, but where they came from.  There's a very interesting Web page illustrating the Coloured nature of bits in law on the US Naval Observatory Web site.  They provide information on that site about when the Sun rises and sets and so on...  but they also provide it under a disclaimer saying that this information is not suitable for use in court.  If you need to know when the Sun rose or set for use in a court case, then you need an expert witness - because you don't actually just need the bits that say when the Sun rose.  You need those bits to be Coloured with the Colour that allows them to be admissible in court, and the USNO doesn't provide that.  It's not just a question of accuracy - we all know perfectly well that the USNO's numbers are good.  It's a question of where the numbers came from.  It makes perfect sense to a lawyer that where the information came from is important, in fact maybe more important than the information itself.  The law sees Colour.

Supponiamo che pubblichiate un articolo che per caso contenga una frase identica
a una di questa articolo, ad esempio "La legge vede i Colori". Sono soltanto
quattro parole, tutte comuni, e la frase potrebbe essere benissimo prodotta
casualmente. Magari avevate idee simili alle mie e avete messo insieme le parole
in modo simile. Se è così, bene. Ma magari avete scritto il "vostro" articolo
copiando e incollando dal "mio" — in tal caso, le parole possiedono quel Colore
che obbliga ad attribuire le citazioni, a preoccuparsi dello stato di "lavoro
derivato" secondo la legge sul copyright e così via. Esattamente le stesse
parole — rappresentate su un computer con esattamente gli stessi bit — possono
avere Colore e conseguenze diverse. Usando le stesse parole senza metterle fra
virgolette puoi essere un autore o un plagiatore, a seconda di dove tu le abbia
prese, anche se sono le stesse parole. È importante da dove vengano quei bit.

Penso che ciò che i programmatori di [Monolith](monolith.sourceforge.com) stiano
sfidando sia il Colore, sebbene abbia paura che la loro comprensione del
problema sia superficiale sia sul lato informatico sia su quello legale. L'idea
di Monolith è di combinare matematicamente due file con l'operazione di or
esclusivo. Prendete un file su cui qualcuno vanta del copyright, fondetelo con
un file pubblico di dominio pubblico, e il risultato, spazzatura apparentemente
priva di informazione, TODO

I think Colour is what the designers of [Monolith](monolith.sourceforge.com) are trying to challenge, although I'm afraid I think their understanding of the issues is superficial on both the legal and computer-science sides.  The idea of Monolith is that it will mathematically combine two files with the exclusive-or operation.  You take a file to which someone claims copyright, mix it up with a public file, and then the result, which is mixed-up garbage supposedly containing no information, is supposedly free of copyright claims even though someone else can later undo the mixing operation and produce a copy of the copyright-encumbered file you started with.  Oh, happy day!  The lawyers will just have to all go away now, because we've demonstrated the absurdity of intellectual property!

Il punto debole di Monolith è che sta prendendo sottogamba il Colore, provando a
usare regole del mondo legale un istante e regole del mondo matematico l'istante
successivo, secondo come faccia più comodo. Quando all'inizio possedevate un
file coperto da copyright, quel file chiaramente ha il Colore "coperto da
copyright", e voi non potete averci a che fare, Cittadino. Quando è crittato
con Monolith, gli autori sostengono che il file risultante non possiede Colore —
come potrebbe avere il Colore del copyright? Sono solo bit casuali! Quando poi
è decrittato, non può possedere il Colore del copyright perché proviene da file
in pubblico dominio. Il problema è che qui ci sono due insiemi di regole in
conflitto. Secondo le regole dell'avvocato, il Colore non è una funzione
matematica dei bit, che può essere determinata andandoli a esaminare. _Quel che
conta è da dove questi bit provengano_. Il file crittato ha ancora il Colore del
copyright perché proviene da un file coperto da copyright. Non importa che
aspetto abbia, o il fatto che sia identico bit a bit a un file che potresti
ottenere da un generatore di numeri casuali. Quel che conta è che non l'hai
ottenuto così. Lo hai ottenuto da materiale coperto da copyright; quindi è
coperto da copyright. Il file generato casualmente, anche se è uguale bit a bit,
ha Colore diverso. Il Colore si conserva per i processi di crittazione e
decrittazione, e tu stai distribuendo del materiale coperto da copyright,
Mutante Traditore Comunista.

To a computer scientist, on the other hand, bits are bits are bits and it is absolutely fundamental that two identical chunks of bits cannot be distinguished.  Colour does not exist.  I've seen computer people claim (indeed, one did this to me just today in the very discussion that inspired this posting) that copyright law inescapably leads to nonsense conclusions like "If I own copyright on one thing, and copyright inherits through XOR, then I own copyright on everything because everything can be obtained from my one thing by XORing it with the right file." That sounds profound only if you're a Colour-blind computer scientist; it would be boring nonsense to a lawyer because lawyers are trained to believe in and use Colour, and it's obvious to a lawyer that the Colour doesn't magically bleed to the entire universe through the hypothetical random files that might be created some day.  You could create the file randomly, but you didn't. Maybe you could create a file identical to the complete works of Shakespeare by XORing together two files of apparently random garbage.  "Why, so can I, or so can any man;" but that doesn't mean that I am William Shakespeare.

This idea of Colour is a problem for communication between those of us who work in the world of computers, where Colour does not exist, and those of us who work in the law, where Colour exists and is important.  Lawyers will ask computer scientists questions about how to determine the Colour of bits (like "How can Friend Computer prevent the Commie Mutant Traitors from making illegal copies of files, while still allowing loyal Troubleshooters to use disk-copying equipment?"), and computer scientists will find it difficult to say anything in response that the lawyers can comprehend - because a big part of computer science is about understanding that Colour does not exist.  Someone who cares a lot about what Colour the bits are, and spends a lot of resources on trying to answer that question, is a dangerous idiot if not a Commie Mutant Traitor.  In intellectual property law the Colour of bits exists and is of absolutely paramount importance.  A computer scientist who won't tell what Colour the bits are is being deliberately unhelpful, and a computer scientist who denies the very existence of Colour (as any conscientious computer scientist must eventually do) is a dangerous idiot and/or a Commie Mutant Traitor.

There are several ways we could try to avoid the issue.  Computer scientists who want to try to be helpful may say, "Okay, you, the lawyer, are a dangerous idiot, but I have to work with you or be thrown in jail as a Commie Mutant Traitor as happened to Dmitry Sklyarov, so I'll try to address your concerns.  You say there is some special property of some bits and we need to know which bits have this property.  Fine.  We'll attach tags to the files to say what Colour they are." In the copyright realm, that's the "rights management information" solution.  It's what they do with DVDs (region coding), VHS tapes (Macrovision), Adobe eBooks ("you may not read this file aloud"), CDs (SCMS), and many other formats.  The trouble is, if we (as computer scientists) are intellectually honest about it, we'll have to admit that it can't really work.

The tags are just more bits.  You can write a tag that says "this is an Orange tag", but it will be made out of bits and so it can't really have a Colour because Colour does not exist.  It will just be a Colour-less tag saying "this is an Orange tag".  It will be subject to all the consequences of the fact that Colour does not exist - such as the fact that the tag could be stripped out somewhere down the line.  The computer scientists are aware of that; we have to be, because knowing about the non-existence of Colour is what makes us computer scientists in the first place.

What we are doing with rights management information is simulating Colour in a computer-sciencey way.  But lawyers will seize on the possibility of doing this kind of simulation and say, "See!  You admit it!  You can recognize the Colour of bits after all!" and then conclude from there that all the other rules they want to make (such as "Red Troubleshooters may not walk down Orange hallways") are meaningful in the computer science realm.  They'll say "You can recognize the Colour of bits after all!" rather than "Colour exists after all!" because the idea of Colour not existing in the first place is not within their imagination.  The "fact" that Colour is something real is so fundamental to law that it can't be challenged.  Of course Colour exists.  We lawyers think about Colour so much that we think we can see it.  Why can't you?  Maybe there is something wrong with your eyes.  As computer scientists, we need to make clear that Colour simulated by Colour-less tags saying "this is an Orange tag" and such, is still only a simulation.  The properties that Colour is supposed to have do not automatically come with the tags, because those properties are Colour, the tags are bits, and bits do not have Colour.  Even bits that talk about Colour do not have Colour themselves.  There is no such thing as Colour.

Another thing computer scientists will try to do is to treat Colour as a function (in the strict mathematical sense of "function") of the bits - maybe an uncomputable function (in the strict mathematical sense of "uncomputable"), maybe intractable, but a function nevertheless.  We either do that because we mistakenly believe that Colour really is a function, or because we're a little more sophisticated, we know that it's not a function, but we think that we can fake it closely enough with a function to get the lawyers off our backs.  Either way, the idea is that we should be able to look at bits and somehow determine, from the bits themselves, what Colour they ought to be.

Treating Colour as a function is almost the same as attaching tags to the bits - the difference is that when the Colour is a function of the bits, we don't have to worry about the tags being detached; on the other hand, when the Colour is a function of the bits, we can never have more than one possible Colour for a given sequence of bits.  Monolith depends on exploiting this problem:  it assumes that one file can only ever have one Colour, asserts that the Colour of its output file is the "you may copy this" Colour because of the (correct) claim that fixing any other single unchangeable Colour would raise legal problems, and then follows the logic to a claim that it can produce what would otherwise be an illegal copy of the copyrighted input, without breaking copyright law.  One Colour per file was never one of the lawyers' rules of Colour; it's merely a consequence of "Colour is a function", and Colour being a function is just something we computer people decided to believe because functions make sense to our training and Colour doesn't.  Colour is not actually a function at all.

Trying to infer the Colour from the bits may seem like an okay thing to do as long as bits are tied to physical objects.  You can examine a paper document and determine whether it is an original or a photocopy.  You can probably examine something purporting to be a photograph and determine whether it is a photograph of a real scene, or something more complicated.  But even in the analog realm, determining Colour by examination is not always possible.  You can't determine by looking at a photograph of two people having sex whether they consented to the sex or not, let alone whether they consented to the making of the photograph.  That's a Colour distinction that is not a function of the bits that make up the photograph - and it's true even of analog photographs.

Other important questions which you may or may not be able to answer by examining a photograph are "Are those things actually humans, or some kind of simulation?" and "How old are they?" Those questions may have been difficult with analog; they become even more difficult with digital.  It is easy to imagine that someone could render by innocent means (drawing or ray tracing or whatever) an image bit-for-bit identical to an image that has the Colour (presumably Pink) of illegal child pornography.  In that case, depending on your view of such things, it may matter where the bits came from to the determination of whether they are Pink (illegal) or Green (legal).  Identical bits may have different Colour.

Child pornography is an interesting case because I find myself, and I think many people in the computing community will find themselves, on the opposite side of the Colourful/Colour-blind gap from where I would normally be.  In copyright I spend a lot of time explaining why Colour doesn't exist and it doesn't matter where the bits came from.  But when it comes to child pornography, I think maybe Colour should make a difference - if we're going to ban it at all, it should matter where it came from.  Whether any children were actually involved, who did or didn't give consent, in short:  what Colour the bits are.  The other side takes the opposite tack:  child pornography is dangerous by its very existence, and it doesn't matter where it came from.  They're claiming that whether some bits are child pornography or not, and if so, whether they're illegal or not, should be entirely determined by (strictly a function of) the bits themselves.  Legality, at least under the obscenity law, should not involve Colour distinctions.

I think computer scientists could actually understand Colour a lot better than we do, because there are places in computer science where Colour does matter.  I already mentioned the idea of quoting and plagiarism - identical words are or are not okay to use without quote marks in an academic paper depending on their Colour.  Those of us with degrees are able to follow the rules for that because people who aren't get kicked out of school before finishing their degrees.  That's a general academic application of Colour.

If you've any exposure to metrology - not "meteorology", I mean the science of measurement - you'll be familiar with the idea of tracing the pedigree of standards.  Down in the chemistry lab they have a big jar of buffer solution with a label asserting that it not only has a pH of exactly 7.00, but that its pH is "traceable" to such-and-such primary standard, through a chain that probably terminates at the National Bureau of Standards in Boulder, Colorado, USA. That's Colour.  Not only do you know the pH of the buffer solution, but you know where it came from.  Someone other than the National Bureau of Standards might be able to produce a buffer solution that is just as good and just as accurately 7.00 pH. If you have a sample of good pH 7.00 buffer solution it might be indistinguishable from the real traceable standard solution; but it wouldn't really be the traceable solution unless it had the intangible Colour to make it authentic.

The computer science applications of Colour seem to be mostly specific to security.  Suppose your computer is infected with a worm or virus.  You want to disinfect it.  What do you do?  You boot it up from original write-protected install media.  Sure, you have a copy of the operating system on the drive already, but you can't use that copy - it's the wrong Colour.  Then you go through a process of replacing files, maybe examining files, swapping disks around and carefully write-protecting them; throughout, you're maintaining information on the Colour of each part of the system and each disk until you've isolated the questionable files and everything else is known to be the "not infected with virus" Colour.  Note that developers of Web applications in Perl use a similar scorekeeping system to keep track of which bits are "tainted" by influence from user input.

When we use Colour like that to protect ourselves against viruses or malicious input, we're using the Colour to conservatively approximate a difficult or impossible to compute function of the bits.  Either our operating system is infected, or it is not.  A given sequence of bits either is an infected file or isn't, and the same sequence of bits will always be either infected or not.  Disinfecting a file changes the bits.  Infected or not is a function, not a Colour.  The trouble is that because any of our files might be infected including the tools we would use to test for infection, we can't reliably compute the "is infected" function, so we use Colour to approximate "is infected" with something that we can compute and manage - namely "might be infected".  Note that "might be infected" is not a function; the same file can be "might be infected" or "not (might be infected)" depending on where it came from.  That is a Colour.

But the "might be infected" Colour is clearly a fictional thing we create to help us approximate a tricky function.  It's still easy to argue that Colour doesn't really exist.  I've saved until last what I think is the best example of a Colour in computer science, and I think even the most hardline mathematicians will have to agree that even though this isn't a function and cannot be represented in bits, it's something real that we have to be able to think about and care about.

Random numbers have a Colour different from that of non-random numbers.  The question of how to determine whether numbers are random or not by looking at them is one of the recurring flame wars of sci.crypt.  You can't do it.  Here's a number:  2.  Was that a random number?  Well, maybe I got it by rolling a die (a random generator); or maybe I got it by counting my legs (probably not random).  If I give you a file of supposedly random bits, there's no way you can tell whether they are randomly generated or not.  The same file could have been generated by a quantum-mechanical random source, monkeys on typewriters, or by encrypting some well-known non-random file with some scheme that may or may not be generally known.

There are statistical tests you can do; for instance, if you look at the file and discover that it contains a copy of the works of Shakespeare, then it doesn't look much like you would expect randomly generated numbers to look.  But it could still be randomly generated.  The test tells you whether the file has the statistical properties expected from randomly generated files, not whether the file really is randomly generated or not.  It's not even correct to say "the probability of this being from a random generator is very low" because that's not true - it either was or was not randomly generated, that's not open to probability.  At best you could say "If we ran a random generator to produce a file this size, the probability of it generating this file would be very low", which sounds almost the same, but is not.

Note my terminology - I spoke of "randomly generated" numbers.  Conscientious cryptographers refuse to use the term "random numbers".  They'll persistently and annoyingly correct you to say "randomly generated numbers" instead, because it's not the numbers that are or are not random, it's the source of the numbers that is or is not random.  If you have numbers that are supposed to come from a random source and you start testing them to make sure they're really "random", and you throw out the ones that seem not to be, then you end up reducing the Shannon entropy of the source, violating the constraints of the one-time pad if that's relevant to your application, and generally harming security.  I just threw a bunch of math terms at you in that sentence and I don't plan to explain them here, but all cryptographers understand that it's not the numbers that matter when you're talking about randomness.  What matters is where the numbers came from - that is, exactly, their Colour.

Perciò se pensiamo di capire la crittografia, dovremmo essere in grado di
capire che il Colore è qualcosa di reale sebbene i bit non posseggano Colore.
Penso sia ora che gli informatici prendano sul serio il Colore — se non altro
per spiegare meglio agli avvocati perché debbano abbandonare il proprio sogno
di pretendere l'esistenza del Colore all'interno dell'Amico Computer, in cui il
colore non c'è e non può esistere. Magari allora smetteranno di provare a
spararci in quanto Mutanti Traditori Comunisti.

["What Colour are your bits?"]: http://ansuz.sooke.bc.ca/entry/23
[Paranoia]: http://www.mongoosepublishing.com/rpgs/paranoia.html
